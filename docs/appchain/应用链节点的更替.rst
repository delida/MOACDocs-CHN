应用链节点的更替
^^^^^^^^^^^^^^^^^^^^^^

应用链节点启动
----------------------

在官方下载链接中找到最新的应用程序（https://github.com/MOACChain/moac-core/releases/），解压后可以看到有scs的目录
配置好userconfig.json文件，其内容如下：

"VnodeServiceCfg":
  所连接的SCS的VNODE端的IP和端口，默认为localhost：50062;

"DataDir": 
  存储appChain数据的数据路径，默认为“./scsdata”;

"LogPath": 
  存储日志数据的数据路径，默认为“./_logs”;

"Beneficiary":
  从appChains获得奖励的有益帐户地址。这与scsserver地址不同。

"VnodechainId":
  所连接的MOAC链的chainId，99 - mainnet，100-devnet，101 -testnet;

"Capability":
  此SCS服务器可以加入的appChains数量，默认为10;
  SCS服务器加入的appChain越多，它可以获得的奖励就越多;
  但同时要求的网络带宽也有相应增加，如果加入的appChain过多而SCS处理能力不够，会造成数据丢失而被惩罚；

"ReconnectInterval":
  如果SCS服务器处于脱机状态，它将尝试连接回来。这是它尝试连接的块数。

"LogLevel":
  记录详细程度：0 =无声，1 =仅显示错误，2 =显示警告信息，3 =显示所有普通信息，4 =显示调试信息，5 =显示所有详细信息（默认值：4）

"BondLimit":
   加入一个appChain的最低存款额，以moac为单位，默认为每个appChain 2 moac; 如果appChain的要求高于这个限制，那么SCS不会加入；

"ReWardMin":
  加入一个appChain的最低奖励限制，以moac为单位，默认为每块0.0001 moac; 如果一个appChain提供的奖励低于这个限制，SCS不会加入；


应用链节点添加
----------------------

应用链合约提供了registerAdd方法来支持应用链添加，必须由应用链部署账号来发送交易请求。

需要对应SubChainProtocolBase矿池合约有等待加入的scs节点。

应用链收到请求后，在矿池合约选取scs，开始同步应用链区块，等一轮flush后生效，正式加入应用链。

registerAdd参数:
::
	nodeToAdd： 当前scs数+需要加入scs数

调用示例:
::	
	> data = subchainbase.registerAdd.getData(20)
	> subchainaddr = '0x1195cd9769692a69220312e95192e0dcb6a4ec09';
	> chain3.personal.unlockAccount(chain3.mc.accounts[0], '123456');
	> chain3.mc.sendTransaction( { from: chain3.mc.accounts[0], value:0, to: subchainaddr, gas: "2000000", gasPrice: chain3.mc.gasPrice, data: data});

验证：scs对应日志开始同步区块，合约公共变量codeCount更新为scs最新数量
::		
	> SubChainBase.nodeCount()
	
应用链节点退出
----------------------

应用链节点退出有两种方式：

1. 当应用链工作正常时，调用子类合约requestRelease方法请求退出应用链，等待一轮flush后生效。

requestRelease参数:
::
	senderType：	1：scs发起请求       2：收益账号发出请求
	index： 		scs序号（参考ScsRPCMethod.GetSubChainInfo中scs的列表）

调用示例（在NODEJS 交互环境下）:	
::	
	> data = subchainbase.requestRelease.getData(senderType, index)
	> subchainaddr = '0x1195cd9769692a69220312e95192e0dcb6a4ec09';
	> chain3.personal.unlockAccount(chain3.mc.accounts[0], '123456');
	> chain3.mc.sendTransaction( { from: chain3.mc.accounts[0], value:0, to: subchainaddr, gas: "2000000", gasPrice: chain3.mc.gasPrice, data: data});
	
验证：等待一轮flush后，关注合约公共变量codeCount是否变化
::		
	> SubChainBase.nodeCount()

	
2. 当应用链工作不正常时，可以调用子类合约requestReleaseImmediate方法请求立即退出应用链。

requestReleaseImmediate参数:
::
	senderType：	1：scs发起请求       2：收益账号发出请求
	index： 		scs序号（参考ScsRPCMethod.GetSubChainInfo中scs的列表）

调用示例:	
::	
	> data = subchainbase.requestReleaseImmediate.getData(senderType, index)
	> subchainaddr = '0x1195cd9769692a69220312e95192e0dcb6a4ec09';
	> chain3.personal.unlockAccount(chain3.mc.accounts[0], '123456');
	> chain3.mc.sendTransaction( { from: chain3.mc.accounts[0], value:0, to: subchainaddr, gas: "2000000", gasPrice: chain3.mc.gasPrice, data: data});
	
验证：合约公共变量codeCount是否变化
::		
	> SubChainBase.nodeCount()


